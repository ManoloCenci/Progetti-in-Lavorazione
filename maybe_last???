
#include "get_next_line.h"
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>

char	*gnl_breaker(char	*final, char	*buff)
{
	int		i;
	char	*new;
	int		j;
	
	i = 0;
	j = 0;
	while (final[i] && final != NULL)
		i++;
	while (buff[j] && buff[j] != '\n')
		j++;
	if (buff[j] == '\n')
		j++;
	new = calloc (i + j + 1 , 1);
	if (!new)
		return (NULL);
	if (final != NULL)
		ft_strcpy(new, final);
	j = 0;
	while (buff[j] && buff[j] != '\n')
		new[i++] = buff[j++];
	if (buff[j] == '\n')
		new[i] = '\n';
	if (final != NULL)
		free (final);
	return (new);
}
void	get_reminded(char	*remind)
{
	char	*tmp;
	int i;

	i = 0;
	while (remind[i] && remind [i] != '\n')
		i++;
	if (remind[i] == '\n')
		i++;
	if (remind[i])
	{
		tmp = remind;
		remind = ft_calloc(ft_strlen(&tmp[i]) + 1, 1);
		ft_strcpy(remind, &tmp[i]);
		free (tmp);
	}
	else
	{
		free (remind);
		remind = NULL;
	}
}
int	get_buffed (char	*final, char	*remind, int	fd)
{
	char	*buff;
	int		len_read;
	char	*nl;
	
	buff = calloc (BUFFER_SIZE + 1, 1);
	while ((len_read = read (fd, buff, BUFFER_SIZE)) > 0)
	{
		if (ft_strchr(buff,'\n'))
		{
			final = gnl_breaker(final, buff);
			nl = ft_strchr(buff, '\n');
			nl++;
			if (remind != NULL)
				buff++;	
			if (nl[0])
				remind = ft_strdup(nl);
			free (buff);
			return (1);
		}
		else
			final = gnl_breaker(final, buff);
	memset(buff, 0, BUFFER_SIZE);
	}
	if (len_read == 0)
		return (1);
	else
		return (-1);
}
char *get_next_line(int fd)
{
	char		*final;
	static char	*remind;
	
	final = NULL;
	remind = NULL;
	if (remind != NULL)
	{
		if (remind[0])
			gnl_breaker(final, remind);
		get_reminded(remind);
		return (final);
	}
	if (get_buffed(final, remind, fd) > 0)
		return (final);
	else
		return (NULL);
}
